// Code generated by "esc -o static.go -pkg zenfo -prefix static static"; DO NOT EDIT.

package zenfo

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/favicon.ico": {
		local:   "static/favicon.ico",
		size:    15406,
		modtime: 1532236701,
		compressed: `
H4sIAAAAAAAC/+ybWVBUWZ7GmZ6OiX7siah5r6caqxREQFBREJdaLKu7rLEmetqe6Yopo9uurVvRKgtK
RUUQFFlEQPYdZAfZ933fd0RENkFILSFJkv2b+E5yL5mQruXUPEyfiC88nPP//79fZt689+Y5VwODfzD4
R4Nf/5r/vmlw7JcGBuYGBgZvvqn5e8M/GxgE/9LAwNh4Zf4tA4PKfzEw2GBgYPBrxhloxp/VPDfaHQ3c
fKE7xNhx7kXEWOYw9+rGU0cjTC4j3uzaOqV/4C+kb445zL1h9EN3grkHEtco/0gURorvCrG/dp45PkY/
dPttPjeXbHEdKRbXUf1tBpqcCvGodRQTg+N41K+R6LeOijnGMJY5zA0wvjCXts0Ht7f5oO58Dth601qQ
ZumDnrB6IfY5xsYYxjKHucEmjnMZ228ic8dNPG4bQ3dSI6YfKVF7IhO9EY3oDW8UfY51JTWKGMYyh7mh
ps5z2ZaBqPxjEpTjk8ixDkLpX5KgfqLC4uwCFmbmMfOjSoxxjjGMZQ5zI7a6zJUeuoXxsgGoHkzhfnSb
0NLcIqrPZKHmXDYWVPPyOGMYyxzmRpu7zZX8Nhb3sjowNfgYLT7laPGtwOy0Gl2XK9HtUilYOMY5xjCW
OcyNtXCfK90dheo/pmLu8QzK98ei/btizDyehurHaUw/Voo+xzjHGMYyh7nx27zmKvbcQuWeWxirG8RE
0QBUj6dR900WBqLahdjnGOcYw1jmMDdxh89c9f5E1OxPxJ0rNeIzGs3tQ+2BFAzFdAqxzzE2xjCWOcxN
3Ok71/CHHDT+IRftLpVo9azCcMMA1I9nMPtQJcQ+xzjHGMYyh7lR2691t31Xjh6HWh21X6vGw+YRIfbX
zjOHuZ7GZ45mfBKOewFtGIrs1tH92C6hteOMZQ5zxXfQ+PTRgO3O3TEfec/F/sbnmWIMY5lj8BrahpVz
zO7nnmfwC6nn9JbtBvdNpz1uGNq3+Rj9MOVrdEbpa3T2J+qMkrVuGNm3sTY99FFc3XjquI/RGXXoFidE
mbgixvTKaxVrsjY96KXt7brx+HG/zecQZeqKODM3vefF1yHWpge96Elvh7e+2uBlaKeOMnVB/NZrSNjq
/mIyc0eTa6EQ+y+aRw960ZPezhuPewRuuYC4rdfWncufpbQ9vlhaWhJi/2Vy6UVPeru8c6ItzMRJjCeZ
ez5XJUfj0RVYg9HyfkiNfY5x7kVq0Iueru+caHPdeHIq0tQFSeZe4tojy/w68j6NQMa7AaJfZXsbT3om
8LzGGMYyh7mswb52bXrRk95XN32rjDJzFde+VAtvWXmHI7C0sATVg0kMZXWL2svLyxgdGUVNTCkKHFOw
sLAgxD7HOMcYtqGsHpHLGqylXZte9KT3tU3fKWPMriB12w2kaSl9700MtPXJr0ulUqH0eiaS9/KafAOZ
7wZiYWlRiH2OcY4xjJUaa7CWdm160ZPe7oanlbFb3cS1O32776q2+WAos1uuMzOhROHhKHk++90g2Z99
aZwxjJUaa6SvqU0vetLbw/B7ZZy5O9K3+yFDS3WnsjS+MzMY6R3SvAcPplD0aYyYz3kvWPZnn2OcYwwb
c5gr7k1OZenUphc96e1pZKeMt/BAxg7eq/gLZVn6Y/KOQuQ2Bpci88Mg9Lfc1fA8mELxp7HI+yAMS8tL
Qrnvh4qxmRVvxjKnIbhU/M1arCnVpxc96e1lZK9MsPBElmUAsldUc+y2yJt6MoWcA6FiLOtgsMygHlNC
NTIlv8fK/seYGVXK3oxlDnNZg401pfr0oie9vTefUSZuu46cnUHIXVFfSJPIuZfTgVzL1fHsj0LxsHdE
9pXOP1J70D0kYqR45vbldIg51pTG6UVPet8wPqtM3u6N3F3ByNsZguIDURivHBQ5PUF1KPkoRkd87WzD
XQPI/iIa2V/GYKRHc3xMditQcjBaJ5412FiTtelBL3rS28f4nDJlxw3k7wpBt3s1v+TPPcfwO8775QKr
UKEauyw8P0skCg960ZPevlvOK9N2+KLQKgzVDtkYHhnG7Nys5vVMTeLB2KissfGH8vvddrYYRVbhQu0X
NMfZ4uIiRh+O6eSwBhtrsjY96EVPevuZXFCmW95EkXUESqwjUbAvHPfzNd/7bv9a5O8PX9W74Rjt0rzX
MyNKdJwtRce5UqhXjr3B6ru68fvDRQ021mRtetCLnvS+aXJRmbHTHyW7I8W9L9XpWy1yHlUOo9Q6Sh6v
+30a1GPTT3171aPTIkaKZy5rsHX6Vcvj9KInvf1NHZVZOwNRujsaZTYxQlWfp2J+YR5L80uo/fdUMVZ/
JF3UF+e09vvoLmuXj//OghYxJjEwljnMZQ3WYk2pPr3oSe8AUydl9q5glNvEint3SYO1mnP/WHofGrS8
B1r7UPpJHKp+k4j5xQUh9jnGOYmBOcwVn0ttn05tetGT3kFmzsocqxDx26Fqb5ys6q/TMTs7K47Z+cdq
2bv8k3gxX/NxMhYWF4TY5xjnJAaRs7wsalR/la5Tm170pHew+WVlnnUoqvbGo3pvgo56E5rlz/bH4Uco
/2R1rvbjFNmffWmcMYyVGmusrUsvetI71MJFmb87HDXvJaH2vWRZDZ9mYHZ0Wue7O57Rj+Yj2WK+/vBt
2Z99jnGOMdrnENZgLe3a9KInvamCPZGoO5yB+sOZshqP5WF8fBz3Wu6iKaZavqbzePqxdgwP4u6I8xDF
Psc4J90rMIe5rMFa2rXpRU96B5o7TxXsi0TT0QI0Hy2U1XK0ENVfZ6H+WK7oV53NQ1d5O5TTT//+cY4x
jGUOc1mjRasuRS960tvP7GJbpnUQWm1L0fFtJTqfo9oLhWgIq0RXYZs431Hsc4xzz8unB73oSW93kx88
4nZcR90Xubjj2oi7rk0vJo9mqNUzQuy/aB496EVPejsZ2m7wNbugTt8bhG63OtwP6sRAUJfQYFDnM9SF
9qRGocHnxEr1WJse9KInvfkbyHnzqeN+Wx2Rtj8Q7c4VGI6/gxGh3tekO6Ima9ODXvTU/g14ydD2uKfJ
GXWo+RWkfhiIoj8lovTLlNci1mJN1qYHvfT9BnYw/GrDJSNbD5fN37ZdMT495WZsp3wdYi3WZG166Pvt
//+18c0wNjAw+Oz56yT/pPNZGTj84upbtm+4bDxh47Hpu0uehqcrvAy/H72+yU7xc4qe9CYDWchEtme9
Zoc3P/vVlbdPHvLY9H22j9GZqYDNF5aDjR0RuuUSwmQ5afVft1Zr05PeZCALmchGxqfxu7x9wv66od14
oPGF5XATZ7GmEmN6BbFmV/9PJNaXTF1BFjKRjYz63neXt/9m72Voh5AtFxFt6opbpm4ra07/e+tOz5eG
gSxkIhsZnd/+m730OfCYcn77+CEPw9PjQSvscVvdEC/WlF5dCVvdkbrXVyjhJ9aiyEQ2MpKVzGR3eOtP
b1zZaJvtt/nscpSJC+LMNGttiVs9fpKK/jsWiuZhIfZ/aj0ykY2MZCUz2S/96zc21zZ9NxVi4ohYMzck
mLu/1JqbPiXv8EJPZD3Ej8dliD7HfmpdspGRrGQmu+OGry9dN7IT39f4rddeaJ1Or7Z6IGmbF9L33UTB
kSgM5vXI93/sc4xzjBGxr+hDRrKSmeyOb39T4bP5rPieJ5h7Itnc66WUtNUTyRZeqDyehoGMTjzpGcfM
QyUW1QsyP/sc4xxjGMsckfuSfmQkK5kvvf1NheM734z6GZ9DjNlVJJLf4rpepWz3Rvo+f9y29pXXQTP2
+6PWPvuF1j/1rYcylzWkdVDWpge9nsZBRrKSmexO7/xVcdPYQRxXfH0pYh1TV6nbb6DaNh1j5f24F9+K
/MMRKP9LMkbL+rGonpeZ+JvpyeQkhu8P4UfFY/l3DPsc4xxjVj+XeVGDtfIPR4ra9KAXPfWxkJGsZCa7
8zt/U/gbnxfrjnx9qSvroNrK2BuA4ZK74ru4vLiEqb5HUE+odNZ9hoeHUBSdg9t/jcTt3wWjO6lB5mef
Y5xjDGOXtX4LshZrsjY96EVPfSxkJCuZyX75neOKAGPNPkGqhbfOeq6k27t8UetXiBnVzLr1qkdjCpRE
5SH+Ux+d+J6YVX72OSbNM5Y5zF1esy5GD3ppx+usMVt4C1Yyk/3yRltF4JaLiDd313hv99GrjIOBGGm5
r+M1q1Kj0i0bada+urFWN9ET06jF3yjGtGOYw1zW0G70oNfTOMTrN3cHmcnustFWEST4PcQet85aubxm
7ouqL1OhHtf9jby8tITR0n7kvh+iE0/WO1r8d1b4tWOYw9xlrXVWcSyNTwsveupjISNZyUx2l00nFcEm
l5Bo4YXb9F6z3k7lvh+Kh+X35WNG+USJWfXsyosAHuT3iXVvKT7Tyh93YptW+WObxJg0z1jmSIujrMWa
0rFEL3rqYyEjWclMdtdNpxQhK/zpO/zEswJr1XQmXz6fTyp+RIlLOmqiijGtmpZfw1hJP4r+LUbEZ1kH
rOPnGOcYw1iJnTVYizVZW7pe0FMfCxnJSmayX9n0rSLE1AlJ266L9f+slXV4Sdk7A+Q9B7K0ZtQha28Q
MvcFojwwT34NPHeQK/9ABLKtAtGf2C4fEzwvcoxzjBHnmRV21mAt1mzNrJc/A3rSey0PGclKZrJToabO
SN7mjawd/vJegqSGUzmr15zJSeR9HrO637A/CNURxVBNq+TP4WFxv2Bcml1cvS6o5jF0uxtjRffk9505
zGUNqV7e59HCQ2r0XstDRrKSmexXDb9ThJldRsr2G+IZkZydq8rdFYSRrF7N+tryEnoKW8UehXZM9och
qIks0dlbe14Tx0xkicjVrsXa9KCXOBdl9QoGHT/LQMFKZrJfMzqtCDdzRep2H5GftzNYVtGBSEytHDvz
8/Oou5CrMy8pZ38IWhNqZF+pzc3NYW5+TmdscXERDVHlIkdfrdoLuZib11zT6U0GHa+dQYKVzGR3N/pe
EbHVVew7CP5dIUL5NmGo+iwF6oea43tmUoWqY2ko2BO+XrvDMFExuHoOnFGjObcOaXZRSLOPRktBA+ak
8xWAgdh2FNiE6a1FD3qJOg+nBQNZJC4ykpXMZPcwslNEml/BbUs/5O0KRr5VKOqOZQqPh0X98nlncXYB
o3l9GErqWqfhlG55jVasTVd0Iu/jCBTsChXK+yQCfdWre67zT2YxlNiltxY96CWdh8hAFjKRjYxkJTPZ
qSjzK0i39BP7T6UfxuBxyxhetfEYavQoFtyFVmFCBVahaPYtW3ev8DKNTGQjI1mjVvg9je0V0eZuyLD0
R4FVGIo/iEZvcQdmVCpx/Eqe/Jd/q9XqdZqdndVh6/WvR6FVuI7urux9Svub6lm13lr6PMlCJrKRkaxk
JruX8Q+KGItryNoZgELrcBRbRyD/99EovpyO+sgyzExpjsUZpQr1YaUovZa1TpVeuXj0UCHzTXZMoPp3
ySi2ihCq+X0KpnpWryEjvUMod8/RW4se9BKeUyrBQBbBZB0hGMlKZrJ7bSG/u9i3EnuFYh8tCsU2kSj/
QyKeDGn2XBZm5lD/ZRaK9kSul00EOuLr5T1MXp8m2ydwz78J9wKaMNmpkK9ZvP9v9i4VOfpq0WNBpTln
0ZsMZJG4yEhWMpP9+pYzilvbPJC9Kwgl1hGre4S7o1D24S08aB6Qr029nnU685KqfpuAiZLBFzuQlyGe
y2OOvlr0kK5x9CaD9jwZyUpmsnubnFXEbfMUe9d8fWU20avaE4OOmDr5eJxqmxBjqzExqPuPNCjKhmRP
Hq9rvw/sz8zMaPb9Vl4Dc5ir2btc9aOHlENvXb9owUhWMpPd28RhhT9E7H+W28SuancsKr9Ig1KlXDku
ltHxfQnKd8eI+eqPkwUHx+XramgxSq5lYujugHz/NtDdj2KndNSE8J5PJddiLmtovGJEbakWPelNBm0m
MpJVw++guGFyXpGw/TryrMLEe6G9nyr2VPfcQk9ph3xsP2l+iJrfJKPm4xRMFA3q3M/wusrPu3J/HO7d
apOfI+mPbRNjnGOM9v0Sa7AWa7K2dH6iZ/kaFoqMZCUz2X3Iv8Mb+dZhqNgTi8o9cetUezIbTyY097ZL
6gUMR3fhUcWIzj1wQ3Q5yg5p4qvei8dAfMfq+x/fIcY4xxjGat97sxZrLq1cK+lFT30sZCQrmcnua3pB
kbjDGwXW4WL/uFrsF+uq6mACOlMb5bWDpblFLC9pHTMhxag4uBpf814CBrX42eeYNM9YzbG0cu+9tCxq
SucnetFTHwsZyUpmsvuZXlQkWd5A4e4IVO2JW7cnLanyaCom+nWvy/Ozc2iOq0blQd3YmvcTMRjfqcXf
KcZ06h1MELmsod3oQa+ncZCRrGQmu5+ZoyLZ0gdFNpGo2hePmn2JetX8X1l4ckeh47WgXsBAeDsaDqXp
xNZ+kITBhK5V/oQuMaYdw5yBiHZRQ2dd645CeD2Ng4xkJTPZBf9OHxTtjULNB8mo+yBlneo/vo2xtHvy
uUHnfke9gKnmCdw5W4W6Ays5H6ViKKlb5mefY2LuQIqIZc7SGnbpvEQveupjISNZySzxp+z0RfG+GNQe
Skf9oYx1ajiShaHiu+I3gHJKic7yNgx23xd/a/squx5jwL8N3faVGC8ekpafRZ9jnGOM9vvAGqzFmqzN
v+lFT30sZCQrmTX8FxXJlr4oeS8W9Uey0Xgkd73+Mxe19vloSKpCTWAJao5lofJEFpqSazA2MiZ+k2hf
X/nbcWlu9X6affF7cln3dwxzWYO1WJO16UEveupjISNZyUz2G6bnRxMtb6Dk/Vg0/rkALX8uWqdW/nus
CA1f5aPpiwJ5rPHrAlQ75qMyvQzDD4Z1X8dTGmMYyxzmskbrig9r04NerXo4KDKSlcxk995yriJ2hycK
9kag+Xgx2k+Wo+NkxUuqDGXnslEckovmkkbc77onP18oPa/IMc4xhrHMeVkfspGRrLd2eMJ7y9kKD2P7
S2EWV5czrYJQ/5c8dJ2vRbdDHXpeQd3na9F+sQpNLhUYrLonP8fFPsc4x5hXqu1QJ9jISFYyk91ls52N
n9nFKX4epYfi0X25Dr1uzegTank1ubdgqLhPfg6ZfY69cj23ZsFENjKSlcxkv2pq+4b7FvvsUHPX5du7
A1F/PB99fm24798hNODfiYEAquMl1ImusEY0l2rE/qvUoLfEQSaykZGsZCa72D/dfPKQp8mZ8fDtV5Hx
bjCa7ItwP7xT/N+R4ageWSMvqf7IDqGXzdP2FP+vJbxTMJGNjGQls/Q8gcObn/3qktFJe3eTHxBq4Ypk
m5so/zwVd4OaMZzUi+GEOxhO7P15Rc+kXsFAFjKRjYxk1fccwUWjE/ZuxnbjN80uLUduu4ak3X4o/jwR
DecL0eJahtar5T+L6EVPepOBLGRyM7YfJ+Oznt84v+n4IafN32a7GdtNeZueX75p5ohAc2cEW7ggxML1
ZxG96ElvMpCFTGR71vMb0vMEDm/ZvnF+8zc2FzYdv+RoaFvhZHRy1MnolML5Z5KT0MlRepOBLA56n5/R
ffbn7+3v7WXb/wQAAP//idluty48AAA=
`,
	},

	"/index.html": {
		local:   "static/index.html",
		size:    235,
		modtime: 1532236496,
		compressed: `
H4sIAAAAAAAC/0yPsU7EMAyGZ/IUJjvJyuBESAVWkCgDY0hdEpEmUePhek9/atPhJlufZX/+8fH1Yxh/
Pt8g8JKswF4AMJCb9gYAF2IHPri1ERv5Pb4/PctzxJET2SvluaiY54K6E/GAKeZ/WCkZ2XhL1AIRS+Ct
kpFMF9a+NQlhpdnIfmAH+pDrbhf4W6btINUOZYn5D75KyUop1PXkvmR2nl/un6hWoO67AnXPdAsAAP//
npEIqOsAAAA=
`,
	},

	"/zenfo.css": {
		local:   "static/zenfo.css",
		size:    172,
		modtime: 1532236369,
		compressed: `
H4sIAAAAAAAC/1zMsQrCMBCA4bl9iqNzAlEcJJ3cnHyHUy/24JpIclaj+O4i1A6uH/z/MZ0rvNompKg2
4MhSPXR7komUTwgHulFnYAEDu8woBgrGYgtlDv1cF36Sh9X2+lhEq5CHmPKI8sMJM2PUf74TXwb1sHGu
bxvhSHaYae2+y3f7CQAA//8NiS6CrAAAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
